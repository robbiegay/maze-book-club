<h2>@ViewData["Title"]</h2>

<p>The purpose of this site is to display the Mazes I will be building as I read through <a href="https://pragprog.com/titles/jbmaze/mazes-for-programmers/" target="_blank">Mazes for Programmers</a>.</p>

<p>Below are some weekly updates as I work through the book and meet with Luke and John for our book club meetings.</p>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Week</th>
            <th scope="col">Update</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row">1</th>
            <td>
                <p>
                    During the first week of our "Maze" book club, we read chapter one and created our own implementations
                    of the Binary Tree and Sidewinder maze building algorithms.
                </p>
                <p>
                    I set the following goals for the maze building project:
                    <ul>
                        <li>Build a Mazes web app using .NET Framework, Razor pages, and MVC 5. Complete a <a href="https://app.pluralsight.com/library/courses/asp-net-mvc5-web-apps/table-of-contents">MVC 5 Pluralsight course</a>.</li>
                        <li>Try to apply <a href="https://en.wikipedia.org/wiki/SOLID">SOLID principles</a>. Get feedback from other book club members on how well I am implementing SOLID principles. Learn from code reviewing other book club members' code.</li>
                        <li>Work through the "Mazes" book, learning more about algorithms and creating some awesome mazes!</li>
                    </ul>
                </p>
            </td>
        </tr>
        <tr>
            <th scope="row">2</th>
            <td>
                <p>
                    An initial goal going into this project was to host the mazes in a ASP.NET Framework MVC web app. After week one,
                    I received feedback that I should port my site over to an ASP.NET Core app, as .NET Framework is depreciated. You can
                    find my .NET Framework maze site <a href="https://mazecreator.azurewebsites.net">here</a>. The site you are currently reading
                    this on is built using .NET Core!
                </p>
                <p>
                    This week I wrote a maze solving algorithm to solve the binary tree and sidewinder mazes. The algorithm solves the
                    maze by hugging the left-hand wall. In a 'perfect' maze, this will lead you to the exit eventually. As you can tell by running the
                    maze solver a few times, it is not always the most efficient; It will sometimes explore close to 50% of the maze before finding the
                    exit.
                </p>
                <p>
                    I added a timer class that provides some metrics on how quickly my maze generation and maze solving algorithms take to run. 
                    I initially hide the timer value for solving the maze, as I don't think this should be displayed until the 'Solve Maze' 
                    button is clicked.
                </p>
                <p>
                    I worked on adding some Unit Tests to my project. I read some documentation on 
                    using <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test">xUnit</a>. I also 
                    watched part of a Pluralsight course 
                    on <a href="https://app.pluralsight.com/library/courses/csharp-test-driven-development/table-of-contents">Test Driven Development (TDD)</a>. 
                    The test driven development process follows the following cycle when adding a new feature: Red - Green - Refactor. This means that 
                    for each new feature, you write a test for the feature that will fail (Red). You then write the minimum amount of code to get 
                    the test to pass (Green). This can be as minimal as returning a hard-coded value. You then refactor the code to flesh out the feature. 
                    The advantage of this is that you can quickly run the unit test during the development process to check if your feature is operational.
                </p>
                <p>
                    Chapter 2 covered implementing the binary tree and sidewinder algorithms and displaying your maze visually. The book
                    explains how to display your maze using ASCII Art and rendering it as an image. Since I am rendering my mazes using the
                    HTML <a href="https://www.w3schools.com/html/html5_canvas.asp">Canvas</a> element, I did not implement this section of the reading.
                </p>
                <p>
                    The book implemented its maze using a Cell class that keeps a reference to each of its North, South, East, and West 
                    neighbors. I used a 2-D List and check on each cell's neighbors by looking at the adjacent cells. I may try to implement their 
                    solution over this upcoming week as I think it has several advantages.
                </p>
            </td>
        </tr>
    </tbody>
</table>